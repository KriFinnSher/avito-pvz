// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "avito-pvz/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// AddOne provides a mock function with given fields: ctx, _a1
func (_m *Repository) AddOne(ctx context.Context, _a1 models.Product) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Product) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_AddOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOne'
type Repository_AddOne_Call struct {
	*mock.Call
}

// AddOne is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 models.Product
func (_e *Repository_Expecter) AddOne(ctx interface{}, _a1 interface{}) *Repository_AddOne_Call {
	return &Repository_AddOne_Call{Call: _e.mock.On("AddOne", ctx, _a1)}
}

func (_c *Repository_AddOne_Call) Run(run func(ctx context.Context, _a1 models.Product)) *Repository_AddOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Product))
	})
	return _c
}

func (_c *Repository_AddOne_Call) Return(_a0 error) *Repository_AddOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_AddOne_Call) RunAndReturn(run func(context.Context, models.Product) error) *Repository_AddOne_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLast provides a mock function with given fields: ctx, receptionID
func (_m *Repository) DeleteLast(ctx context.Context, receptionID uuid.UUID) error {
	ret := _m.Called(ctx, receptionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLast")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, receptionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLast'
type Repository_DeleteLast_Call struct {
	*mock.Call
}

// DeleteLast is a helper method to define mock.On call
//   - ctx context.Context
//   - receptionID uuid.UUID
func (_e *Repository_Expecter) DeleteLast(ctx interface{}, receptionID interface{}) *Repository_DeleteLast_Call {
	return &Repository_DeleteLast_Call{Call: _e.mock.On("DeleteLast", ctx, receptionID)}
}

func (_c *Repository_DeleteLast_Call) Run(run func(ctx context.Context, receptionID uuid.UUID)) *Repository_DeleteLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_DeleteLast_Call) Return(_a0 error) *Repository_DeleteLast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_DeleteLast_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Repository_DeleteLast_Call {
	_c.Call.Return(run)
	return _c
}

// GetForReception provides a mock function with given fields: ctx, receptionID
func (_m *Repository) GetForReception(ctx context.Context, receptionID uuid.UUID) ([]models.Product, error) {
	ret := _m.Called(ctx, receptionID)

	if len(ret) == 0 {
		panic("no return value specified for GetForReception")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Product, error)); ok {
		return rf(ctx, receptionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Product); ok {
		r0 = rf(ctx, receptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, receptionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetForReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForReception'
type Repository_GetForReception_Call struct {
	*mock.Call
}

// GetForReception is a helper method to define mock.On call
//   - ctx context.Context
//   - receptionID uuid.UUID
func (_e *Repository_Expecter) GetForReception(ctx interface{}, receptionID interface{}) *Repository_GetForReception_Call {
	return &Repository_GetForReception_Call{Call: _e.mock.On("GetForReception", ctx, receptionID)}
}

func (_c *Repository_GetForReception_Call) Run(run func(ctx context.Context, receptionID uuid.UUID)) *Repository_GetForReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_GetForReception_Call) Return(_a0 []models.Product, _a1 error) *Repository_GetForReception_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetForReception_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Product, error)) *Repository_GetForReception_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
