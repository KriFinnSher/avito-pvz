// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "avito-pvz/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CloseLast provides a mock function with given fields: ctx, pvzID
func (_m *Repository) CloseLast(ctx context.Context, pvzID uuid.UUID) error {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for CloseLast")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, pvzID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CloseLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseLast'
type Repository_CloseLast_Call struct {
	*mock.Call
}

// CloseLast is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzID uuid.UUID
func (_e *Repository_Expecter) CloseLast(ctx interface{}, pvzID interface{}) *Repository_CloseLast_Call {
	return &Repository_CloseLast_Call{Call: _e.mock.On("CloseLast", ctx, pvzID)}
}

func (_c *Repository_CloseLast_Call) Run(run func(ctx context.Context, pvzID uuid.UUID)) *Repository_CloseLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_CloseLast_Call) Return(_a0 error) *Repository_CloseLast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CloseLast_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Repository_CloseLast_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *Repository) Create(ctx context.Context, _a1 models.Reception) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Reception) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 models.Reception
func (_e *Repository_Expecter) Create(ctx interface{}, _a1 interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *Repository_Create_Call) Run(run func(ctx context.Context, _a1 models.Reception)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Reception))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 error) *Repository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, models.Reception) error) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllForPVZ provides a mock function with given fields: ctx, pvzID
func (_m *Repository) GetAllForPVZ(ctx context.Context, pvzID uuid.UUID) ([]models.Reception, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllForPVZ")
	}

	var r0 []models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Reception, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Reception); ok {
		r0 = rf(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAllForPVZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllForPVZ'
type Repository_GetAllForPVZ_Call struct {
	*mock.Call
}

// GetAllForPVZ is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzID uuid.UUID
func (_e *Repository_Expecter) GetAllForPVZ(ctx interface{}, pvzID interface{}) *Repository_GetAllForPVZ_Call {
	return &Repository_GetAllForPVZ_Call{Call: _e.mock.On("GetAllForPVZ", ctx, pvzID)}
}

func (_c *Repository_GetAllForPVZ_Call) Run(run func(ctx context.Context, pvzID uuid.UUID)) *Repository_GetAllForPVZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_GetAllForPVZ_Call) Return(_a0 []models.Reception, _a1 error) *Repository_GetAllForPVZ_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAllForPVZ_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Reception, error)) *Repository_GetAllForPVZ_Call {
	_c.Call.Return(run)
	return _c
}

// GetLast provides a mock function with given fields: ctx, pvzID
func (_m *Repository) GetLast(ctx context.Context, pvzID uuid.UUID) (models.Reception, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for GetLast")
	}

	var r0 models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Reception, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Reception); ok {
		r0 = rf(ctx, pvzID)
	} else {
		r0 = ret.Get(0).(models.Reception)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLast'
type Repository_GetLast_Call struct {
	*mock.Call
}

// GetLast is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzID uuid.UUID
func (_e *Repository_Expecter) GetLast(ctx interface{}, pvzID interface{}) *Repository_GetLast_Call {
	return &Repository_GetLast_Call{Call: _e.mock.On("GetLast", ctx, pvzID)}
}

func (_c *Repository_GetLast_Call) Run(run func(ctx context.Context, pvzID uuid.UUID)) *Repository_GetLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_GetLast_Call) Return(_a0 models.Reception, _a1 error) *Repository_GetLast_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetLast_Call) RunAndReturn(run func(context.Context, uuid.UUID) (models.Reception, error)) *Repository_GetLast_Call {
	_c.Call.Return(run)
	return _c
}

// IsOpen provides a mock function with given fields: ctx, receptionID
func (_m *Repository) IsOpen(ctx context.Context, receptionID uuid.UUID) bool {
	ret := _m.Called(ctx, receptionID)

	if len(ret) == 0 {
		panic("no return value specified for IsOpen")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, receptionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Repository_IsOpen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOpen'
type Repository_IsOpen_Call struct {
	*mock.Call
}

// IsOpen is a helper method to define mock.On call
//   - ctx context.Context
//   - receptionID uuid.UUID
func (_e *Repository_Expecter) IsOpen(ctx interface{}, receptionID interface{}) *Repository_IsOpen_Call {
	return &Repository_IsOpen_Call{Call: _e.mock.On("IsOpen", ctx, receptionID)}
}

func (_c *Repository_IsOpen_Call) Run(run func(ctx context.Context, receptionID uuid.UUID)) *Repository_IsOpen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_IsOpen_Call) Return(_a0 bool) *Repository_IsOpen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_IsOpen_Call) RunAndReturn(run func(context.Context, uuid.UUID) bool) *Repository_IsOpen_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
